"use strict";(self.webpackChunkdevsite=self.webpackChunkdevsite||[]).push([[1799],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=i,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6496:(e,t,n)=>{n.r(t),n.d(t,{default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=n(7462),i=(n(7294),n(3905));const o={id:"java-springboot",title:"Spring Boot Java AuthN Service"},r={unversionedId:"didkit-examples/java-springboot",id:"didkit-examples/java-springboot",isDocsHomePage:!1,title:"Spring Boot Java AuthN Service",description:"Source//github.com/spruceid/didkit/tree/main/examples/java-springboot",source:"@site/docs/didkit-examples/example--java-springboot.md",sourceDirName:"didkit-examples",slug:"/didkit-examples/java-springboot",permalink:"/docs/didkit-examples/java-springboot",editUrl:"https://github.com/spruceid/spruceid.dev/edit/main/docs/didkit-examples/example--java-springboot.md",version:"current",frontMatter:{id:"java-springboot",title:"Spring Boot Java AuthN Service"},sidebar:"docs",previous:{title:"Batch Generation & Verification",permalink:"/docs/didkit-examples/batch-generation"},next:{title:"Svelte CHAPI",permalink:"/docs/didkit-examples/svelte-chapi"}},l=[{value:"Introduction",id:"introduction",children:[]},{value:"Set up &amp; Installation",id:"set-up--installation",children:[{value:"Java",id:"java",children:[]},{value:"Build DIDKit",id:"build-didkit",children:[]},{value:"Database Setup (MySQL)",id:"database-setup-mysql",children:[]},{value:"(Optional) Test MySQL",id:"optional-test-mysql",children:[]},{value:"Database Connection Configuration",id:"database-connection-configuration",children:[]},{value:"Redis",id:"redis",children:[]},{value:"(Optional) Test Redis",id:"optional-test-redis",children:[]}]},{value:"Building and Running",id:"building-and-running",children:[]},{value:"Java Example App Walkthrough",id:"java-example-app-walkthrough",children:[]}],s={toc:l};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Source: ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/spruceid/didkit/tree/main/examples/java-springboot"},"https://github.com/spruceid/didkit/tree/main/examples/java-springboot")),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"This project demonstrates use of verifiable credentials and presentations to\nenable user authentication for an application. See the DIDKit repository's\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/spruceid/didkit/tree/main/examples/"},"examples")," folder for code snippets."),(0,i.kt)("h2",{id:"set-up--installation"},"Set up & Installation"),(0,i.kt)("p",null,"This project has the following key dependencies to consider:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Java 11"),(0,i.kt)("li",{parentName:"ol"},"DIDKit compiled locally & linked from the classpath"),(0,i.kt)("li",{parentName:"ol"},"The DIDKit Java artifact (",(0,i.kt)("inlineCode",{parentName:"li"},"didkit.jar"),"), usually built by DIDKit installation."),(0,i.kt)("li",{parentName:"ol"},"A MySQL database")),(0,i.kt)("h3",{id:"java"},"Java"),(0,i.kt)("p",null,"To run this example you will need Java 11 installed."),(0,i.kt)("p",null,"For example, on Ubuntu you could install OpenJDK:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ apt-get install openjdk-11-{jre,jdk}\n")),(0,i.kt)("h3",{id:"build-didkit"},"Build DIDKit"),(0,i.kt)("p",null,"The web application makes use of DIDKit to handle credentials and presentations,\nplease refer to the project's documentation to build the library for your platform,\n",(0,i.kt)("inlineCode",{parentName:"p"},"libdidkit.so")," on UNIX-like systems, ",(0,i.kt)("inlineCode",{parentName:"p"},"didkit.dll")," on Windows, ",(0,i.kt)("inlineCode",{parentName:"p"},"libdidkit.dylib"),"\non MacOS, etc."),(0,i.kt)("p",null,"Then you will have to add it to the classpath of your platform. On UNIX systems,\nfor example, you can copy (or symlink) ",(0,i.kt)("inlineCode",{parentName:"p"},"libdidkit.so")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/lib")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/lib"),". In the instructions below, we will list commands to create a\nsymlink to the local build folder."),(0,i.kt)("p",null,"You will then require the Java artifact (",(0,i.kt)("inlineCode",{parentName:"p"},"didkit.jar"),"). This example project\nalready has a symlink in the build directory.  All you have to do is run the\nfollowing commands in the root folder to build everything and ensure proper\nlinking:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ cargo build\n# Use libdidkit.so for UNIX-like, didkit.dll for Windows, libdidkit.dylib for MacOS\n$ ln -s target/debug/libdidkit.so examples/java-springboot/\n$ make -C lib ../target/didkit.jar\n")),(0,i.kt)("p",null,"If you are trying to use DIDKit with an external Java project, you will have to\npoint your build tool (Gradle, Maven, etc) to the ",(0,i.kt)("inlineCode",{parentName:"p"},"didkit.jar")," file. Also\nensure that the static library (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"libdidkit.so")," is in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"java.library.path")," or specified using the proper environment variables, such\nas ",(0,i.kt)("inlineCode",{parentName:"p"},"LD_LIBRARY_PATH")," on UNIX-like. Please refer to the full documentation for\nthose tools. Here is an excerpt of how we have listed it on this project's\n",(0,i.kt)("inlineCode",{parentName:"p"},"pom.xml")," for Maven:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n  <groupId>com.spruceid.didkit</groupId>\n  <artifactId>didkit</artifactId>\n  <version>0.1</version>\n  <scope>system</scope>\n  <systemPath>${basedir}/didkit.jar</systemPath>\n</dependency>\n")),(0,i.kt)("h3",{id:"database-setup-mysql"},"Database Setup (MySQL)"),(0,i.kt)("p",null,"This project uses a MySQL database to store the user entity. We will use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"root")," user for simplicity because this is only an example. In your actual\ndeployments, it is ",(0,i.kt)("strong",{parentName:"p"},"very important")," that you configure the correct accounts,\npolicies, and permissions for your SQL installations."),(0,i.kt)("h4",{id:"a-docker-mysql-database"},"(a) Docker MySQL Database"),(0,i.kt)("p",null,"One easy way to run an instance is by using docker:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker run \\\n  -e MYSQL_ROOT_PASSWORD=root \\\n  -e MYSQL_DATABASE=didkit \\\n  -p 3306:3306 \\\n  --name didkit-java-db \\\n  -d mysql:5\n")),(0,i.kt)("h4",{id:"b-system-mysql-database"},"(b) System MySQL Database"),(0,i.kt)("p",null,"Here are some commands to use a local instance of the MySQL-compatible MariaDB\non Ubuntu:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo apt-get install mariadb-client mariadb-server\n$ sudo service mysql start\n$ sudo mysql_secure_installation  # set the root password to 'root'\n$ sudo mariadb\n# allow anyone to use the root account with the right password. DO NOT DO THIS IN PRODUCTION.\nMariaDB [(none)]> UPDATE mysql.user SET plugin = 'mysql_native_password' WHERE User='root';\nMariaDB [(none)]> FLUSH PRIVILEGES;\n# create the example database\nMariaDB [(none)]> CREATE DATABASE didkit;\nMariaDB [(none)]> quit\n")),(0,i.kt)("h3",{id:"optional-test-mysql"},"(Optional) Test MySQL"),(0,i.kt)("p",null,"To ensure that mysql is working, try the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ apt-get install mariadb-client\n$ mariadb -uroot -proot\nMariaDB [(none)]> SHOW DATABASES;\nMariaDB [(none)]> quit\n")),(0,i.kt)("h3",{id:"database-connection-configuration"},"Database Connection Configuration"),(0,i.kt)("p",null,"If you need to modify the database credentials you will need to update the\nrelevant fields in ",(0,i.kt)("inlineCode",{parentName:"p"},"src/main/resources/application.properties"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"spring.datasource.url=jdbc:mysql://localhost:3306/didkit\nspring.datasource.username=root\nspring.datasource.password=root\n")),(0,i.kt)("h3",{id:"redis"},"Redis"),(0,i.kt)("p",null,"This project makes use of Redis to store single use tokens and authentication\ninformation for the QR code flows."),(0,i.kt)("h4",{id:"a-docker-redis"},"(a) Docker Redis"),(0,i.kt)("p",null,"One easy way, just like MySQL, to have it running locally is to use docker:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# docker run \\\n  -p 6379:6379 \\\n  --name didkit-java-redis \\\n  -d redis\n")),(0,i.kt)("h4",{id:"b-system-redis"},"(b) System Redis"),(0,i.kt)("p",null,"Here are some commands to install and run Redis on Ubuntu:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt-get install redis\nsudo service redis-server start\n")),(0,i.kt)("h3",{id:"optional-test-redis"},"(Optional) Test Redis"),(0,i.kt)("p",null,"To ensure that mysql is working, try the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ apt-get install redis\n$ redis-cli\n127.0.0.1:6379> set foo "Hello, World!"\n127.0.0.1:6379> get foo\n127.0.0.1:6379> del foo\n')),(0,i.kt)("h2",{id:"building-and-running"},"Building and Running"),(0,i.kt)("p",null,"We are now ready to build and run the installation. To download the required\nJava dependencies, build the project, and then run it, you can execute the\nfollowing commands from the root project directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd examples/java-sprintboot\n$ LD_LIBRARY_PATH=`pwd` ./mvnw spring-boot:run\n")),(0,i.kt)("p",null,"You can then load ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:8081")," to see the web application."),(0,i.kt)("p",null,"To verify that DIDKit has been setup correctly, you can then run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ curl -v http://localhost:8081/version\n")),(0,i.kt)("p",null,"And you should expect to see a version string in the response."),(0,i.kt)("h2",{id:"java-example-app-walkthrough"},"Java Example App Walkthrough"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Visit http://localhost:8081 with your web browser."),(0,i.kt)("li",{parentName:"ol"},'Create a user by clicking "Sign Up" on the navigation bar.'),(0,i.kt)("li",{parentName:"ol"},'Log in with your newly created user by clicking "Sign In" on the navigation\nbar.'),(0,i.kt)("li",{parentName:"ol"},"Issue yourself a credential to use for login instead of username and\npassword. You can receive credentials in the example ",(0,i.kt)("a",{parentName:"li",href:"#"},"CHAPI wallet")," or\nusing the QR code workflow and\n",(0,i.kt)("a",{parentName:"li",href:"https://github.com/spruceid/credible"},"Credible")," mobile wallet.")))}d.isMDXComponent=!0}}]);