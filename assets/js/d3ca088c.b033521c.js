"use strict";(self.webpackChunkdevsite=self.webpackChunkdevsite||[]).push([[8393],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>m});var r=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function d(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function a(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var s=r.createContext({}),l=function(e){var t=r.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):d(d({},t),e)),i},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=l(i),m=n,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return i?r.createElement(h,d(d({ref:t},c),{},{components:i})):r.createElement(h,d({ref:t},c))}));function m(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=i.length,d=new Array(o);d[0]=u;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:n,d[1]=a;for(var l=2;l<o;l++)d[l]=i[l];return r.createElement.apply(null,d)}return r.createElement.apply(null,i)}u.displayName="MDXCreateElement"},3104:(e,t,i)=>{i.r(t),i.d(t,{default:()=>l,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var r=i(7462),n=(i(7294),i(3905));const o={id:"did-methods",title:"DID Methods Supported",hide_title:!0,sidebar_label:"DID Methods"},d={unversionedId:"didkit/did-methods",id:"didkit/did-methods",isDocsHomePage:!1,title:"DID Methods Supported",description:"DID Methods supported today:",source:"@site/docs/didkit/did-methods.md",sourceDirName:"didkit",slug:"/didkit/did-methods",permalink:"/docs/didkit/did-methods",editUrl:"https://github.com/spruceid/spruceid.dev/edit/main/docs/didkit/did-methods.md",version:"current",sidebar_label:"DID Methods",frontMatter:{id:"did-methods",title:"DID Methods Supported",hide_title:!0,sidebar_label:"DID Methods"},sidebar:"docs",previous:{title:"Core Concepts",permalink:"/docs/didkit/concepts"},next:{title:"Runtime Configuration",permalink:"/docs/didkit/runtime-config"}},a=[{value:"DID Methods supported today:",id:"did-methods-supported-today",children:[]},{value:"Proof types verifiable so far:",id:"proof-types-verifiable-so-far",children:[]}],s={toc:a};function l(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,r.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"did-methods-supported-today"},"DID Methods supported today:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://did-tezos-draft.spruceid.com/"},"did-tezos"),': architected by Spruce,\ndid:tezos supports a powerful and robust multi-layer architecture.  This\nincludes support for "implicit" (unpublished) DIDs, on-chain (published) DIDs,\nDIDs that begin their lives as the former and become the latter, and\nadditional metadata local to specific networks, including Sidetree networks.'),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://w3c-ccg.github.io/did-method-key/"},"did-key"),": the classic\ndeterministic method for generating DIDs deterministically from a JWK file or\nother local key material"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/spruceid/ssi/blob/main/did-pkh/did-pkh-method-draft.md"},"did-pkh"),':\na did-key-like deterministic method for generating DIDs from blockchain\naddresses encoded and validated according to the emerging "CAIP" cross-chain\naddressing ',(0,n.kt)("a",{parentName:"li",href:"https://github.com/ChainAgnostic/CAIPs"},"specification")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://w3c-ccg.github.io/did-method-web/"},"did-web"),': a DID method for\npublishing a DID document to a domain\'s "/.wellknown/" configuration\ndirectory, to be resolved over HTTPS. Note: we also host a\n',(0,n.kt)("a",{parentName:"li",href:"/docs/didkit/did-web/"},"tutorial")," on how to create and set up a did-web using\n",(0,n.kt)("inlineCode",{parentName:"li"},"didkit-cli"),"."),(0,n.kt)("li",{parentName:"ul"},"did-webkey: a DID method designed in-house for deterministically deriving DID\nDocuments from key material exposed by major web APIs; while we implemented it\nspecifically for the SSH and GPG keys exposed and consumed by GitHub's APIs,\nit could readily be extended to analogous contexts."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://blockchaincommons.github.io/did-method-onion/"},"did:onion"),": a DID\nmethod designed to be resolved over Tor-style onion routing"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/decentralized-identity/ethr-did-resolver/blob/master/doc/did-method-spec.md"},"did-ethr"),":\nthe classic Ethereum-based DID method at the heart of uPort, Veramo, and many\nweb3 dApp projects (implicit only; main-net indexing & resolution coming soon)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://identity-com.github.io/sol-did/did-method-spec.html"},"did-sol"),": the\nnative DID method of the Solana blockchain and DeFi ecosystem.")),(0,n.kt)("h2",{id:"proof-types-verifiable-so-far"},"Proof types verifiable so far:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"RSASignature2018"),(0,n.kt)("li",{parentName:"ul"},"Ed25519VerificationKeys"),(0,n.kt)("li",{parentName:"ul"},"EcdsaSecp256k1Signature2019"),(0,n.kt)("li",{parentName:"ul"},"EcdsaSecp256r1Signature2019"),(0,n.kt)("li",{parentName:"ul"},"EcdsaSecp256k1RecoverySignature2020"),(0,n.kt)("li",{parentName:"ul"},"Eip712Signature2021"),(0,n.kt)("li",{parentName:"ul"},"SolanaSignature2021"),(0,n.kt)("li",{parentName:"ul"},"JsonWebSignature2020")))}l.isMDXComponent=!0}}]);