"use strict";(self.webpackChunkdevsite=self.webpackChunkdevsite||[]).push([[2844],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=i.createContext({}),l=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,m=u["".concat(d,".").concat(h)]||u[h]||c[h]||r;return n?i.createElement(m,o(o({ref:t},p),{},{components:n})):i.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1436:function(e,t,n){n.r(t),n.d(t,{default:function(){return c},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return l}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],s={id:"quickstart",slug:"/",hide_table_of_contents:!0,title:"Quickstart Guide to working with DIDKit"},d={type:"mdx",permalink:"/",source:"@site/src/pages/index.md"},l=[{value:"Step 0: install DIDKit",id:"step-0-install-didkit",children:[]},{value:"Step 1: Issue and verify your first VC using a DID",id:"step-1-issue-and-verify-your-first-vc-using-a-did",children:[{value:"Generating a <code>did-key</code> DID",id:"generating-a-did-key-did",children:[]}]},{value:"Step 2: Verifying a <code>did-web</code> issued VC",id:"step-2-verifying-a-did-web-issued-vc",children:[]}],p={toc:l};function c(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-spruce-id"},"Getting Started with Spruce ID"),(0,r.kt)("p",null,"This site exists for three complementary purposes: "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"To quickly demonstrate DIDKit and other SpruceID tooling."),(0,r.kt)("li",{parentName:"ol"},"To provide developer ",(0,r.kt)("a",{parentName:"li",href:"/docs/"},"documentation")," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/glossary"},"references"),"\nfor more details about ",(0,r.kt)("a",{parentName:"li",href:"/docs/didkit"},"DIDKit"),"."),(0,r.kt)("li",{parentName:"ol"},"To introduce the concepts of ",(0,r.kt)("a",{parentName:"li",href:"/docs/primer/"},"W3C Verifiable Credentials\n(VCs)")," and ",(0,r.kt)("a",{parentName:"li",href:"/docs/didkit/did-methods"},"W3C Decentralized Identifiers\n(DIDs)"),".")),(0,r.kt)("p",null,"This guide describes how to perform credential issuance and verification with\nDIDKit's CLI program. For other packaging, such as HTTP endpoints and SDK\nintegration, see the ",(0,r.kt)("a",{parentName:"p",href:"/docs/didkit-packages"},"DIDKit Packages")," page."),(0,r.kt)("h2",{id:"step-0-install-didkit"},"Step 0: install DIDKit"),(0,r.kt)("p",null,"To install the DIDKit command line program on GNU/Linux, MacOS,\nor Windows+WSL, first install\n",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/getting-started/installation.html"},"cargo"),".\nWith ",(0,r.kt)("a",{parentName:"p",href:"https://packages.debian.org/sid/build-essential"},(0,r.kt)("inlineCode",{parentName:"a"},"build-essential"))," or\nequivalent tools also installed, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cargo install didkit-cli\n")),(0,r.kt)("p",null,"This will add the binary ",(0,r.kt)("inlineCode",{parentName:"p"},"didkit")," to your Cargo installation (typically\n",(0,r.kt)("inlineCode",{parentName:"p"},"~/.cargo/bin"),"), which can be added to your system's PATH for ease of use."),(0,r.kt)("p",null,"You can also build DIDKit CLI ",(0,r.kt)("a",{parentName:"p",href:"/docs/didkit/install#manual"},"from source")," or\n",(0,r.kt)("a",{parentName:"p",href:"/docs/didkit/install#docker"},"install via Docker"),"."),(0,r.kt)("h2",{id:"step-1-issue-and-verify-your-first-vc-using-a-did"},"Step 1: Issue and verify your first VC using a DID"),(0,r.kt)("p",null,"W3C Verifiable Credentials are a standard data format for claims expressed in\nJSON, also known as digital attestations. They contain the claim being made,\ndata schema references, and a digital signature to be verified and consumed by\nunknown future parties. More info can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/primer"},"primer"),"."),(0,r.kt)("h3",{id:"generating-a-did-key-did"},"Generating a ",(0,r.kt)("inlineCode",{parentName:"h3"},"did-key")," DID"),(0,r.kt)("p",null,"To issue your first credential, you will need a signing key. We will use this\nkey to generate a DID using the\n",(0,r.kt)("a",{parentName:"p",href:"https://w3c-ccg.github.io/did-method-key/"},(0,r.kt)("inlineCode",{parentName:"a"},"did-key"))," DID method. DIDKit can\ngenerate a signing key with the ",(0,r.kt)("inlineCode",{parentName:"p"},"generate-ed25519-key")," subcommand to create an\n",(0,r.kt)("a",{parentName:"p",href:"https://ed25519.cr.yp.to/"},"Ed25519")," private key in the\n",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7517"},"JWK")," format. Existing JWKs can also be\nloaded via filepath."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"didkit generate-ed25519-key > issuer_key.jwk\nissuer_did=$(didkit key-to-did key -k issuer_key.jwk)\necho $issuer_did\n")),(0,r.kt)("p",null,"With the signing key prepared and its representation as a did-key known,\nspecify the JSON of the Verifiable Credential to be signed. You can use\nthe following example for this tutorial."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'cat > unsigned-vc.json <<EOF\n{\n    "@context": "https://www.w3.org/2018/credentials/v1",\n    "id": "urn:uuid:`uuidgen`",\n    "type": ["VerifiableCredential"],\n    "issuer": "${issuer_did}",\n    "issuanceDate": "$(date -u +%FT%TZ)",\n    "credentialSubject": {\n        "id": "did:example:my-data-subject-identifier"\n    }\n}\nEOF\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@context")," property flags this JSON object as a W3C Verifiable Credential,\nand can be optionally interpreted as ",(0,r.kt)("a",{parentName:"p",href:"https://json-ld.org/"},"JSON-LD"),", which is\nout of scope of this tutorial. The ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," property is the identifier for the VC,\nwhich may be unique and ultimately depends on the system design. The ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),"\nproperty identifies this VC as a base data model, with no additions. The\n",(0,r.kt)("inlineCode",{parentName:"p"},"issuer")," property contains a URI referring to the issuer of the VC (the did-key\ngenerated previously), with ",(0,r.kt)("inlineCode",{parentName:"p"},"issuanceDate")," denoting when the VC was issued\n(now, in UTC).  Finally, the ",(0,r.kt)("inlineCode",{parentName:"p"},"credentialSubject")," contains the claim itself,\nwhich for this dummy example, contains no information other than the data\nsubject in ",(0,r.kt)("inlineCode",{parentName:"p"},"credentialSubject.id"),", which happens to be an example Decentralized\nIdentifier. A full listing of the required or suggested properties for a VC can\nbe found in the ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/vc-data-model/"},"VC Data Model"),"\nspecification."),(0,r.kt)("p",null,"To sign the VC using DIDKit CLI with Decentralized Identifiers, input the path\nto the signing key, a verification method (",(0,r.kt)("inlineCode",{parentName:"p"},"-v"),"), a proof purpose (",(0,r.kt)("inlineCode",{parentName:"p"},"-p"),"), and\nthe unsigned credential (",(0,r.kt)("inlineCode",{parentName:"p"},"stdin"),"). Verification methods describe how to\ninterpret the signature and check for validity. Proof purposes add the scope\nand intent of the signing, and in this example we will use the proof purpose\nvalue of ",(0,r.kt)("inlineCode",{parentName:"p"},"assertionMethod"),", which asserts the authenticity of the credential.\nFor more information verification methods and proof purposes, refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/did-core/#assertion"},"DID\nCore specification"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'vm=$(didkit key-to-verification-method key --key-path issuer_key.jwk)\ndidkit vc-issue-credential --key-path issuer_key.jwk \\\n                           -v "${vm}" -p assertionMethod \\\n                           <unsigned-vc.json > signed-vc.json\ncat signed-vc.json\n')),(0,r.kt)("p",null,"This produces a signed VC, which we will now verify."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"didkit vc-verify-credential < signed-vc.json\n")),(0,r.kt)("p",null,"You shouldn't see any failed checks, warnings, or errors. For good measure, try\nmodifying the contents of ",(0,r.kt)("inlineCode",{parentName:"p"},"signed-vc.json")," and ensuring that it no longer\nverifies successfully."),(0,r.kt)("h2",{id:"step-2-verifying-a-did-web-issued-vc"},"Step 2: Verifying a ",(0,r.kt)("inlineCode",{parentName:"h2"},"did-web")," issued VC"),(0,r.kt)("p",null,"In this example, we will verify a VC generated from Spruce's demo server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"curl https://demo.spruceid.com/get-example-vc > example-vc.json\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"`example-vc.json` should resemble the following content (click to expand):"),(0,r.kt)("div",null,(0,r.kt)("code",null,'\n{\n  "@context":["https://www.w3.org/2018/credentials/v1"],\n  "type":"VerifiableCredential",\n  "credentialSubject":{},\n  "issuer":"did:web:demo.spruceid.com",\n  "issuanceDate":"2021-09-13T18:23:56Z",\n  "proof":{\n    "type":"Ed25519Signature2018",\n    "proofPurpose":"assertionMethod",\n    "verificationMethod":"did:web:demo.spruceid.com#_t-v-Ep7AtkELhhvAzCCDzy1O5Bn_z1CVFv9yiRXdHY",\n    "created":"2021-09-13T18:23:56.483Z",\n    "jws":"eyJhbGciOiJFZERTQSIsImNyaXQiOlsiYjY0Il0sImI2NCI6ZmFsc2V9..X5J2jI5j3TPqFO_g6XOlB730WlXJ8mDsfoyLQ4u60MelVosi1Et6V_pB7-zELDggdqZTsKQjSqDodv0m7ui1Bg"\n  },\n  "expirationDate":"2021-10-13T18:23:56Z"\n}\n'.slice(1,-1))),(0,r.kt)("br",null)),(0,r.kt)("br",null),(0,r.kt)("p",null,"To verify the VC, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"didkit vc-verify-credential -p assertionMethod < example-vc.json\n")),(0,r.kt)("p",null,"You shouldn't see any failed checks, warnings, or errors. For good measure, try\nmodifying the contents of ",(0,r.kt)("inlineCode",{parentName:"p"},"example-vc.json")," and ensuring that it no longer\nverifies successfully. Under the hood, DIDKit will resolve the\n",(0,r.kt)("a",{parentName:"p",href:"https://w3c-ccg.github.io/did-method-web/"},(0,r.kt)("inlineCode",{parentName:"a"},"did-web"))," DID into a DID Document\ncontaining public keys and supported verification methods."),(0,r.kt)("p",null,"You can resolve a ",(0,r.kt)("inlineCode",{parentName:"p"},"did-web")," DID directly by running the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"didkit did-resolve did:web:demo.spruceid.com\n")),(0,r.kt)("p",null,"Congratulations, you have issued a VC using a ",(0,r.kt)("inlineCode",{parentName:"p"},"did-key")," DID, verified it, and\nalso verified a VC issued by a ",(0,r.kt)("inlineCode",{parentName:"p"},"did-web")," DID!"))}c.isMDXComponent=!0}}]);