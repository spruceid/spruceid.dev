"use strict";(self.webpackChunkdevsite=self.webpackChunkdevsite||[]).push([[1123],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(n),k=a,m=u["".concat(s,".").concat(k)]||u[k]||p[k]||r;return n?i.createElement(m,l(l({ref:t},c),{},{components:n})):i.createElement(m,l({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=n[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8166:function(e,t,n){n.r(t),n.d(t,{default:function(){return p},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return d}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],o={id:"install",title:"Installation"},s={unversionedId:"didkit/install",id:"didkit/install",isDocsHomePage:!1,title:"Installation",description:"[Rust]//www.rust-lang.org/",source:"@site/docs/didkit/install.md",sourceDirName:"didkit",slug:"/didkit/install",permalink:"/docs/didkit/install",editUrl:"https://github.com/spruceid/spruceid.dev/edit/main/docs/didkit/install.md",version:"current",frontMatter:{id:"install",title:"Installation"},sidebar:"docs",previous:{title:"Introducing DIDKit",permalink:"/docs/didkit/"},next:{title:"Core Concepts",permalink:"/docs/didkit/concepts"}},d=[{value:"Cargo install",id:"cargo-install",children:[]},{value:"Manual",id:"manual",children:[]},{value:"Container",id:"container",children:[{value:"Build Images",id:"build-images",children:[]},{value:"Building Interfaces",id:"building-interfaces",children:[]}]}],c={toc:d};function p(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"DIDKit can be installed as a package via ",(0,r.kt)("a",{parentName:"p",href:"#cargo-install"},"cargo"),",\n",(0,r.kt)("a",{parentName:"p",href:"#manual"},"manually")," from source, or in ",(0,r.kt)("a",{parentName:"p",href:"#container"},"containerized")," form."),(0,r.kt)("h2",{id:"cargo-install"},"Cargo install"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"To install the DIDKit command line program on GNU/Linux, MacOS, or\nWindows+WSL, first install\n",(0,r.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/cargo/getting-started/installation.html"},"cargo"),". "),(0,r.kt)("li",{parentName:"ol"},"Install ",(0,r.kt)("inlineCode",{parentName:"li"},"libssl-dev"),", as well as ",(0,r.kt)("inlineCode",{parentName:"li"},"pkg-config"),",",(0,r.kt)("inlineCode",{parentName:"li"},"build-essential"),", or\nequivalent core toolsets if they aren't already installed. "),(0,r.kt)("li",{parentName:"ol"},"Then simply run ",(0,r.kt)("inlineCode",{parentName:"li"},"cargo install")," for the given target package:\n",(0,r.kt)("inlineCode",{parentName:"li"},"didkit-cli | didkit-http"),".",(0,r.kt)("br",{parentName:"li"}),"For example, for DIDKit CLI, run:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cargo install didkit-cli\n")),(0,r.kt)("p",null,"This will add the binary didkit to your Cargo installation (typically\n~/.cargo/bin), which can be added to your system's PATH for ease of use."),(0,r.kt)("h2",{id:"manual"},"Manual"),(0,r.kt)("p",null,"DIDKit is written in ",(0,r.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/"},"Rust"),". To get Rust, you can use ",(0,r.kt)("a",{parentName:"p",href:"https://rustup.rs/"},"Rustup"),"."),(0,r.kt)("p",null,"We do not depend on any Rust nightly features, so our installation instructions\nassume the most recent ",(0,r.kt)("inlineCode",{parentName:"p"},"stable")," version; be sure to ",(0,r.kt)("a",{parentName:"p",href:"https://rust-lang.github.io/rustup/installation/index.html"},"switch the installation\ndefaults")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"nightly")," if the calling application or forked\nsource-code does depend on them."),(0,r.kt)("p",null,"Spruce's ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/spruceid/ssi"},"ssi")," library must be cloned alongside the ",(0,r.kt)("inlineCode",{parentName:"p"},"didkit")," repository in a\nparallel directory between downloading didkit and building it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir didkit\ngit clone https://github.com/spruceid/didkit && cd didkit\ngit clone https://github.com/spruceid/ssi ../ssi --recurse-submodules\n")),(0,r.kt)("p",null,"Build DIDKit using ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/cargo/"},"Cargo"),", from root directory of DIDKit project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cargo build\n")),(0,r.kt)("p",null,"This will give you the DIDKit CLI and HTTP server executables located at\n",(0,r.kt)("inlineCode",{parentName:"p"},"target/debug/didkit")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"target/debug/didkit-http"),", respectively. You can also\nbuild and install DIDKit's components separately. Building the FFI libraries\nwill require additional dependencies. See the corresponding readmes linked below\nfor more info."),(0,r.kt)("h2",{id:"container"},"Container"),(0,r.kt)("p",null,"Both the CLI and HTTP server are containerised and available under\n",(0,r.kt)("inlineCode",{parentName:"p"},"ghcr.io/spruceid/didkit-(cli|http)"),"."),(0,r.kt)("p",null,"The image is private for now, so a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token"},"Personal Access\nToken"),"\nis required. Once created you can login like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker login ghcr.io -u USERNAME --password-stdin\n")),(0,r.kt)("p",null,"You can use the images like CLIs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker run ghcr.io/spruceid/didkit-cli:latest --help\n$ docker run --init -p 8080 ghcr.io/spruceid/didkit-http:latest --port 8080\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: You can pass JWKs either by sharing a volume with ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run --volume"),",\nor by passing the JWK directly with ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run -e JWK=$MY_JWK")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"docker run\ndidkit-http --jwk $MY_JWK"),".")),(0,r.kt)("h3",{id:"build-images"},"Build Images"),(0,r.kt)("p",null,"The Dockerfiles rely on having ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/spruceid/ssi"},"ssi")," in the root of ",(0,r.kt)("inlineCode",{parentName:"p"},"didkit")," (a symbolic link\nwill not work, unfortunately)."),(0,r.kt)("p",null,"Then the images can be built with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker build -f Dockerfile-cli . -t didkit-cli\n$ docker build -f Dockerfile-http . -t didkit-http\n")),(0,r.kt)("p",null,"And to use them, replace ",(0,r.kt)("inlineCode",{parentName:"p"},"ghcr.io/spruceid/didkit-(cli|http):latest")," with\n",(0,r.kt)("inlineCode",{parentName:"p"},"didkit-(cli|http)"),"."),(0,r.kt)("h3",{id:"building-interfaces"},"Building Interfaces"),(0,r.kt)("p",null,"While many of the DIDKit interfaces can be installed as libraries via each\nlanguage's dedicated package manager, they can also be built manually.  For\ninstructions, see the \"Installation\" section of each interface's dedicated page\nin the section to the left."))}p.isMDXComponent=!0}}]);