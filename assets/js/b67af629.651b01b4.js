"use strict";(self.webpackChunkdevsite=self.webpackChunkdevsite||[]).push([[2812],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=r,m=p["".concat(s,".").concat(f)]||p[f]||u[f]||a;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2209:function(e,t,n){n.r(t),n.d(t,{default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],l={id:"core-functions-with-aleo",title:"Core Functions with Aleo"},s={unversionedId:"didkit-examples/core-functions-with-aleo",id:"didkit-examples/core-functions-with-aleo",isDocsHomePage:!1,title:"Core Functions with Aleo",description:"Introduction",source:"@site/docs/didkit-examples/core-functions-with-aleo.md",sourceDirName:"didkit-examples",slug:"/didkit-examples/core-functions-with-aleo",permalink:"/docs/didkit-examples/core-functions-with-aleo",editUrl:"https://github.com/spruceid/spruceid.dev/edit/main/docs/didkit-examples/core-functions-with-aleo.md",version:"current",frontMatter:{id:"core-functions-with-aleo",title:"Core Functions with Aleo"},sidebar:"docs",previous:{title:"Core Functions (HTTP)",permalink:"/docs/didkit-examples/core-functions-in-curl"},next:{title:"did-web in minutes",permalink:"/docs/didkit/did-web"}},c=[{value:"Introduction",id:"introduction",children:[{value:"Start with a keypair",id:"start-with-a-keypair",children:[]},{value:"Generate a DID:Key document",id:"generate-a-didkey-document",children:[]},{value:"Prepare credential for issuing.",id:"prepare-credential-for-issuing",children:[]},{value:"Issue the verifiable credential.",id:"issue-the-verifiable-credential",children:[]},{value:"Verify a verifiable credential.",id:"verify-a-verifiable-credential",children:[]},{value:"Appendix: whole script without comments",id:"appendix-whole-script-without-comments",children:[]}]}],d={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"DIDKit also supports the issuance and verification of Verifiable Credentials using Aleo accounts."),(0,a.kt)("p",null,"This is an example shell script using all the core functions of DIDKit-CLI: key\ngeneration, credential/presentation issuance and verification."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note 1: This script is meant to be in a DIDKit-CLI source directory. See the\ncomplete script below for setup details.")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note 2: Aleo signature functionality in the ssi library requires the ",(0,a.kt)("inlineCode",{parentName:"em"},"aleosig")," feature.\nWhen building the DIDKit CLI the feature ",(0,a.kt)("inlineCode",{parentName:"em"},"ssi/aleosig")," can be used to enable this functionality:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/spruceid/didkit\ncd didkit\ncargo install --features=ssi/aleosig --path cli\ncd .. \n")),(0,a.kt)("h3",{id:"start-with-a-keypair"},"Start with a keypair"),(0,a.kt)("p",null,"The SSI library can generate an Aleo keypair as an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/spruceid/ssi\ncd ssi\ncargo run --example genaleojwk --features=aleosig > aleokey.jwk\n")),(0,a.kt)("p",null,"You can also provide the details of an existing Aleo account, although you will\nneed to do some extra work for DIDKit to use it."),(0,a.kt)("p",null,"The Aleo private JWK format used by DIDKit is non-standard. An example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "kty": "OKP",\n  "crv": "AleoTestnet1Key",\n  "x": "78_Jh_c7Fw46fX31xS9Ifdg_LeuabZ2p2aIl5fn9zw0",\n  "d": "f4a9dNLd0omQcg3SEajVHGqEqwFHDGD9yNc2xpzuiZ3sSJjIf5AnEYXWCQ"\n}\n')),(0,a.kt)("p",null,"The format is as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'kty: "OKP"'),(0,a.kt)("li",{parentName:"ul"},'crv: "AleoTestnet1Key"'),(0,a.kt)("li",{parentName:"ul"},'x: An Aleo account address derived from the private key using Aleo Testnet1\nparameters, as a Base64Url value (without the "aleo" prefix that appears in its\nBase58 format)'),(0,a.kt)("li",{parentName:"ul"},'d: An Aleo private key converted from Base58 (where it starts with\n"APrivateKey1") to Base64Url value')),(0,a.kt)("h3",{id:"generate-a-didkey-document"},"Generate a DID:Key document"),(0,a.kt)("p",null,"This document gets wrapped around the keypair generated (or passed) in the\nprevious step. For more context on the DID:key method, see the\n",(0,a.kt)("a",{parentName:"p",href:"https://w3c-ccg.github.io/did-method-key/"},"specification"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"key=aleokey.jwk\ndid=$(didkit key-to-did pkh:aleo -k $key)\nissued=$(date -u +'%Y-%m-%dT%H:%M:%SZ')\n")),(0,a.kt)("h3",{id:"prepare-credential-for-issuing"},"Prepare credential for issuing."),(0,a.kt)("p",null,"Here, we'll issue an example credential (unsigned) and save it to a file. For\nmore info about what these properties mean, see the Verifiable Credentials Data\nModel ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/vc-data-model/"},"specification"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'cat > credential-unsigned.jsonld <<EOF \n{\n       "@context": ["https://www.w3.org/2018/credentials/v1"],\n       "type": ["VerifiableCredential"],\n       "issuer": "$did",\n       "issuanceDate": "$issued",\n       "credentialSubject": {}\n}\nEOF\n')),(0,a.kt)("h3",{id:"issue-the-verifiable-credential"},"Issue the verifiable credential."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We ask DIDKit to issue a verifiable credential using the given keypair file,\npassing the unsigned credential on standard input.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"didkit vc-issue-credential -k $key < credential-unsigned.jsonld \\\n    > credential-signed.jsonld\n")),(0,a.kt)("h3",{id:"verify-a-verifiable-credential"},"Verify a verifiable credential."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We pass the newly-issued signed verifiable credential back to didkit for\nverification.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"didkit vc-verify-credential < credential-signed.jsonld\n")),(0,a.kt)("h3",{id:"appendix-whole-script-without-comments"},"Appendix: whole script without comments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\nset -ex\nkey=../ssi/tests/aleotestnet1-2021-11-22.json\ndid=$(didkit key-to-did pkh:aleo -k $key)\nissued=$(date -uIsec)\n\ncat > credential-unsigned.jsonld <<EOF \n{\n       "@context": ["https://www.w3.org/2018/credentials/v1"],\n       "type": ["VerifiableCredential"],\n       "issuer": "$did",\n       "issuanceDate": "$issued",\n       "credentialSubject": {}\n}\nEOF\n\ndidkit vc-issue-credential -k $key < credential-unsigned.jsonld \\\n    > credential-signed.jsonld\n\ndidkit vc-verify-credential < credential-signed.jsonld\n')))}u.isMDXComponent=!0}}]);