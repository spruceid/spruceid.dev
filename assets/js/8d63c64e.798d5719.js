"use strict";(self.webpackChunkdevsite=self.webpackChunkdevsite||[]).push([[2666],{3905:function(e,n,i){i.d(n,{Zo:function(){return l},kt:function(){return p}});var t=i(7294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function a(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function o(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?a(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)i=a[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)i=a[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var c=t.createContext({}),d=function(e){var n=t.useContext(c),i=n;return e&&(i="function"==typeof e?e(n):o(o({},n),e)),i},l=function(e){var n=d(e.components);return t.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=d(i),p=r,h=f["".concat(c,".").concat(p)]||f[p]||u[p]||a;return i?t.createElement(h,o(o({ref:n},l),{},{components:i})):t.createElement(h,o({ref:n},l))}));function p(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<a;d++)o[d]=i[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,i)}f.displayName="MDXCreateElement"},2615:function(e,n,i){i.r(n),i.d(n,{default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var t=i(7462),r=i(3366),a=(i(7294),i(3905)),o=["components"],s={id:"batch-generation",title:"Batch Generation & Verification"},c={unversionedId:"didkit-examples/batch-generation",id:"didkit-examples/batch-generation",isDocsHomePage:!1,title:"Batch Generation & Verification",description:"Introduction",source:"@site/docs/didkit-examples/batch-generation.md",sourceDirName:"didkit-examples",slug:"/didkit-examples/batch-generation",permalink:"/docs/didkit-examples/batch-generation",editUrl:"https://github.com/spruceid/spruceid.dev/edit/main/docs/didkit-examples/batch-generation.md",version:"current",frontMatter:{id:"batch-generation",title:"Batch Generation & Verification"},sidebar:"docs",previous:{title:"did-web in minutes",permalink:"/docs/didkit/did-web"},next:{title:"Spring Boot Java AuthN Service",permalink:"/docs/didkit-examples/java-springboot"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"Batch Issuance Setup",id:"batch-issuance-setup",children:[{value:"Define generation function",id:"define-generation-function",children:[]},{value:"Run generation function on loop",id:"run-generation-function-on-loop",children:[]}]},{value:"Batch Verification Script Setup",id:"batch-verification-script-setup",children:[{value:"Define verification function",id:"define-verification-function",children:[]},{value:"Run verification function on loop",id:"run-verification-function-on-loop",children:[]}]},{value:"Appendix: whole script",id:"appendix-whole-script",children:[]}],l={toc:d};function u(e){var n=e.components,i=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,t.Z)({},l,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"This shell script can be used to quickly generate a large volume of VCs for testing purposes.  The generated VCs use the bare-minimum schema and contain essentially nothing aside from a unique UUID each, in the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," field.  "),(0,a.kt)("p",null,"To generate these VC ids, they use the commonplace ",(0,a.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/56172946/how-to-generate-a-uuid-in-shell-script"},"uuidgen")," command.  For more realistic sample VCs, simply start with a credential definition from a real-world context, and populate values for all the fields, such as names and addresses, with command-line tools or spreadsheets of dummy data."),(0,a.kt)("h2",{id:"batch-issuance-setup"},"Batch Issuance Setup"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/sh\n\n# Exit if any command in this script fails.\nset -e\n\nif [ -e issuer_key.jwk ]; then\n    echo 'Using existing keypair.'\nelse\n    didkit generate-ed25519-key > issuer_key.jwk\n    echo 'Generated keypair.'\nfi\nissuer=$(didkit key-to-did-key -k issuer_key.jwk)\nprintf 'Issuer DID: %s\\n' \"$issuer\"\nissuer_vm=$(didkit key-to-verification-method -k issuer_key.jwk)\nprintf 'Issuer verification method: %s\\n' \"$issuer_vm\"\n")),(0,a.kt)("h3",{id:"define-generation-function"},"Define generation function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'generate_credential() {\n    didkit vc-issue-credential \\\n        -k issuer_key.jwk \\\n        -v "$issuer_vm" \\\n        -p assertionMethod <<-EOF\n    {\n        "@context": "https://www.w3.org/2018/credentials/v1",\n        "id": "uuid:$(uuidgen)",\n        "type": ["VerifiableCredential"],\n        "issuer": "$issuer",\n        "issuanceDate": "$(date -u +\'%FT%TZ\')",\n        "credentialSubject": {\n            "id": "uuid:$(uuidgen)"\n        }\n    }\n    EOF\n}\n')),(0,a.kt)("h3",{id:"run-generation-function-on-loop"},"Run generation function on loop"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This will generate a file named ",(0,a.kt)("inlineCode",{parentName:"li"},"creds")," with a stringified verifiable credential on each line, with as many lines as the value of ",(0,a.kt)("inlineCode",{parentName:"li"},"count"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'creds_file=creds\nprintf \'Writing to file "%s"\\n\' "$creds_file"\ntouch "$creds_file"\n\ni=1\ncount=100\nwhile [ $i -le $count ]; do\n    printf \'\\rGenerating credentials... %d/%d\' $i $count >&2\n    generate_credential\n    : $((i = i+1))\ndone > "$creds_file"\nprintf \'\\nDone\\n\'\n')),(0,a.kt)("h2",{id:"batch-verification-script-setup"},"Batch Verification Script Setup"),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"In this script, a verification method is derived from a local key and manually passed with the -v parameter. This is not the default behavior of DIDKit's verification function, but it greatly accelerates the verification of a large batch of VCs being testing against the known key material and verification method of a known issuer."),(0,a.kt)("p",{parentName:"div"},"Were one to remove the ",(0,a.kt)("inlineCode",{parentName:"p"},"key.jwk")," check, the generation of a verification method, and the passing of that method to the verification function, a verification method would be extracted for each VC verified, from the DID Document of the issuer, which would be resolved each time as specified in the VC being verified. This is the default behavior of DIDKit."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/sh\n\n# Exit if any command in this script fails.\nset -e\n\nif [ ! -e issuer_key.jwk ]; then\n    echo 'Missing keypair.' >&2\n    exit 1\nfi\n\nissuer_vm=$(didkit key-to-verification-method -k issuer_key.jwk)\nprintf 'Issuer verification method: %s\\n' \"$issuer_vm\"\n")),(0,a.kt)("h3",{id:"define-verification-function"},"Define verification function"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'verify_credential() {\n    if ! out=$(didkit vc-verify-credential \\\n        -v "$issuer_vm" \\\n        -p assertionMethod)\n    then\n        printf "verify failed: %s" "$out" >&2\n        return 1\n    fi\n}\n')),(0,a.kt)("h3",{id:"run-verification-function-on-loop"},"Run verification function on loop"),(0,a.kt)("p",null,"Here we loop through the file created above, verifying the credential contained on each line."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'creds_file=creds\nprintf \'Reading from file "%s"\\n\' "$creds_file"\n\ni=1\njq -c . "$creds_file" | while read line; do\n    printf \'\\rVerifying credentials... %d\' $i\n    printf "%s" "$line" | verify_credential \n    : $((i = i+1))\ndone\nprintf \'\\nDone\\n\'\n\n\n')),(0,a.kt)("h2",{id:"appendix-whole-script"},"Appendix: whole script"),(0,a.kt)("p",null,"Also available on Github as"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/spruceid/didkit/cli/tests/example2-batch-generation.sh"},"/cli/tests/example2-batch-generation.sh")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/spruceid/didkit/cli/tests/example2-batch-verification.sh"},"/cli/tests/example2-batch-verification.sh"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\n\n# Exit if any command in this script fails.\nset -e\n\nif [ -e issuer_key.jwk ]; then\n    echo \'Using existing keypair.\'\nelse\n    didkit generate-ed25519-key > issuer_key.jwk\n    echo \'Generated keypair.\'\nfi\nissuer=$(didkit key-to-did-key -k issuer_key.jwk)\nprintf \'Issuer DID: %s\\n\' "$issuer"\nissuer_vm=$(didkit key-to-verification-method -k issuer_key.jwk)\nprintf \'Issuer verification method: %s\\n\' "$issuer_vm"\n\n# Generate a new dummy credential\ngenerate_credential() {\n    didkit vc-issue-credential \\\n        -k issuer_key.jwk \\\n        -v "$issuer_vm" \\\n        -p assertionMethod <<-EOF\n    {\n        "@context": "https://www.w3.org/2018/credentials/v1",\n        "id": "uuid:$(uuidgen)",\n        "type": ["VerifiableCredential"],\n        "issuer": "$issuer",\n        "issuanceDate": "$(date -u +\'%FT%TZ\')",\n        "credentialSubject": {\n            "id": "uuid:$(uuidgen)"\n        }\n    }\n    EOF\n}\n\n# Generate a bunch of verifiable credentials\ncreds_file=creds\nprintf \'Writing to file "%s"\\n\' "$creds_file"\ntouch "$creds_file"\n\ni=1\ncount=100\nwhile [ $i -le $count ]; do\n    printf \'\\rGenerating credentials... %d/%d\' $i $count >&2\n    generate_credential\n    : $((i = i+1))\ndone > "$creds_file"\nprintf \'\\nDone\\n\'\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\n\n# Exit if any command in this script fails.\nset -e\n\nif [ ! -e issuer_key.jwk ]; then\n    echo \'Missing keypair.\' >&2\n    exit 1\nfi\n\nissuer_vm=$(didkit key-to-verification-method -k issuer_key.jwk)\nprintf \'Issuer verification method: %s\\n\' "$issuer_vm"\n\nverify_credential() {\n    if ! out=$(didkit vc-verify-credential \\\n        -v "$issuer_vm" \\\n        -p assertionMethod)\n    then\n        printf "verify failed: %s" "$out" >&2\n        return 1\n    fi\n}\n\ncreds_file=creds\nprintf \'Reading from file "%s"\\n\' "$creds_file"\n\ni=1\njq -c . "$creds_file" | while read line; do\n    printf \'\\rVerifying credentials... %d\' $i\n    printf "%s" "$line" | verify_credential \n    : $((i = i+1))\ndone\nprintf \'\\nDone\\n\'\n\n\n')))}u.isMDXComponent=!0}}]);