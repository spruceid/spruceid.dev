"use strict";(self.webpackChunkdevsite=self.webpackChunkdevsite||[]).push([[4232],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=i.createContext({}),l=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return i.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=l(t),u=a,h=f["".concat(d,".").concat(u)]||f[u]||p[u]||r;return t?i.createElement(h,o(o({ref:n},c),{},{components:t})):i.createElement(h,o({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=f;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2821:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var i=t(7462),a=(t(7294),t(3905));const r={id:"core-functions-in-bash",title:"Core Functions (CLI)"},o={unversionedId:"didkit-examples/core-functions-in-bash",id:"didkit-examples/core-functions-in-bash",isDocsHomePage:!1,title:"Core Functions (CLI)",description:"Introduction",source:"@site/docs/didkit-examples/core-functions-in-bash.md",sourceDirName:"didkit-examples",slug:"/didkit-examples/core-functions-in-bash",permalink:"/docs/didkit-examples/core-functions-in-bash",editUrl:"https://github.com/spruceid/spruceid.dev/edit/main/docs/didkit-examples/core-functions-in-bash.md",version:"current",frontMatter:{id:"core-functions-in-bash",title:"Core Functions (CLI)"},sidebar:"docs",previous:{title:"Overview of Examples",permalink:"/docs/didkit-examples/"},next:{title:"Core Functions (HTTP)",permalink:"/docs/didkit-examples/core-functions-in-curl"}},s=[{value:"Introduction",id:"introduction",children:[{value:"Setup",id:"setup",children:[]},{value:"Start with a keypair",id:"start-with-a-keypair",children:[]},{value:"Generate a DID:Key document",id:"generate-a-didkey-document",children:[]},{value:"Define verificationMethod for keypair.",id:"define-verificationmethod-for-keypair",children:[]},{value:"Prepare credential for issuing.",id:"prepare-credential-for-issuing",children:[]},{value:"Issue the verifiable credential.",id:"issue-the-verifiable-credential",children:[]},{value:"Verify a verifiable credential.",id:"verify-a-verifiable-credential",children:[]},{value:"Create a verifiable presentation that embeds the verifiable credential.",id:"create-a-verifiable-presentation-that-embeds-the-verifiable-credential",children:[]},{value:"Issue verifiable presentation.",id:"issue-verifiable-presentation",children:[]},{value:"Verify the verifiable presentation.",id:"verify-the-verifiable-presentation",children:[]},{value:"Appendix: whole script without commentary",id:"appendix-whole-script-without-commentary",children:[]}]}],d={toc:s};function l(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"This is an example shell script using all the core functions of DIDKit-CLI: key\ngeneration, credential/presentation issuance and verification."),(0,a.kt)("h3",{id:"setup"},"Setup"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note: This script is meant to be run in the directory where DIDKit-CLI is\nbuilt, regardless of installation method. See the complete script below for\nsetup details.")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"These instructions assume Ubuntu, and have been tested on Linux, MacOS, and\nWSL2."),(0,a.kt)("li",{parentName:"ol"},"See DIDKit installation page instructions for dependencies and install options."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"jq")," is recommended but not required for testing purposes. It can be\ninstalled by running the command ",(0,a.kt)("inlineCode",{parentName:"li"},"sudo apt-get install jq"),".")),(0,a.kt)("h3",{id:"start-with-a-keypair"},"Start with a keypair"),(0,a.kt)("p",null,"DIDKit can generate a unique ed25119 keypair from entropy. Alternately, you can\nprovide a static key locally."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"if [ -e issuer_key.jwk ]; then\n    echo 'Using existing keypair.'\nelse\n    didkit generate-ed25519-key > issuer_key.jwk\n    echo 'Generated keypair.'\nfi\n\necho\n")),(0,a.kt)("h3",{id:"generate-a-didkey-document"},"Generate a DID:Key document"),(0,a.kt)("p",null,"This document gets wrapped around the keypair generated (or passed) in the\nprevious step. For more context on the DID:key method, see the\n",(0,a.kt)("a",{parentName:"p",href:"https://w3c-ccg.github.io/did-method-key/"},"specification"),". For more info on the\nparameters and flags for the ",(0,a.kt)("inlineCode",{parentName:"p"},"key-to-did")," function, run ",(0,a.kt)("inlineCode",{parentName:"p"},"didkit help\nkey-to-did"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"did=$(didkit key-to-did key -k issuer_key.jwk)\nprintf 'DID: %s\\n\\n' \"$did\"\n")),(0,a.kt)("h3",{id:"define-verificationmethod-for-keypair"},"Define verificationMethod for keypair."),(0,a.kt)("p",null,"This is used to identify the key in linked data proofs. Verifiers of such proofs\nquery a DID found in a credential based on what ","[registered]"," proof type (i.e.,\nwhat kind of signatures) it needs key material to verify."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"issuer_verification_method=$(didkit key-to-verification-method key -k issuer_key.jwk)\nprintf 'verificationMethod: %s\\n\\n' \"$issuer_verification_method\"\n")),(0,a.kt)("h3",{id:"prepare-credential-for-issuing"},"Prepare credential for issuing."),(0,a.kt)("p",null,"Here, we'll issue an example credential (unsigned) and save it to a file. In\nthis credential, the issuance date, id, and credential subject id are arbitrary,\nbut in real-world usage these are diverse and critical properties. For more info\nabout what these properties mean, see the Verifiable Credentials Data Model\n",(0,a.kt)("a",{parentName:"p",href:"https://w3c.github.io/vc-data-model/"},"specification"),".  Note that SUBJECTDID and\nISSUERDID fields need to be URIs, so if you are using non-DID identifiers such\nas certificates or UUIDs, they need to be prefixed with the approriate ",(0,a.kt)("a",{parentName:"p",href:"https://www.iana.org/assignments/urn-namespaces/urn-namespaces.xhtml"},"URN\nprefix"),',\ni.e., "urn:uuid:", etc.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'SUBJECTDID=\'did:example:d23dd687a7dc6787646f2eb98d0\'\nISSUERDID=$did\nDATE=`date --utc +%FT%TZ`\nCREDID="urn:uuid:"`uuidgen`\n\ncat > credential-unsigned.jsonld <<EOF\n{\n    "@context": "https://www.w3.org/2018/credentials/v1",\n    "id": "$CREDID",\n    "type": ["VerifiableCredential"],\n    "issuer": "$ISSUERDID",\n    "issuanceDate": "$DATE",\n    "credentialSubject": {\n        "id": "$SUBJECTDID"\n    }\n}\nEOF\n')),(0,a.kt)("h3",{id:"issue-the-verifiable-credential"},"Issue the verifiable credential."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We ask DIDKit to issue a verifiable credential using the given keypair file, verification method, and proof purpose, passing the unsigned credential on standard input.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"DIDKit creates a linked data proof to add to the unsigned credential, and outputs the resulting newly-issued (signed) verifiable credential on standard output, which we save to a file."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"didkit vc-issue-credential \\\n    -k issuer_key.jwk \\\n    -v \"$issuer_verification_method\" \\\n    -p assertionMethod \\\n    < credential-unsigned.jsonld \\\n    > credential-signed.jsonld\necho 'Issued verifiable credential:'\ncat credential-signed.jsonld | jq .\n")),(0,a.kt)("h3",{id:"verify-a-verifiable-credential"},"Verify a verifiable credential."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We pass the newly-issued signed verifiable credential back to didkit for verification using the given verification method and proof purpose.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"DIDKit then outputs the verification result as JSON and saves it. If verification is successful, the command completes successfully (returns exit code 0)."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"if ! didkit vc-verify-credential \\\n    -v \"$issuer_verification_method\" \\\n    -p assertionMethod \\\n    < credential-signed.jsonld \\\n    > credential-verify-result.json\nthen\n    echo 'Unable to verify credential:'\n    print_json credential-verify-result.json\n    exit 1\nfi\necho 'Verified verifiable credential:'\ncat credential-verify-result.json | jq .\n")),(0,a.kt)("h3",{id:"create-a-verifiable-presentation-that-embeds-the-verifiable-credential"},"Create a verifiable presentation that embeds the verifiable credential."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Prepare to present the verifiable credential by wrapping it in a verifiable presentation (VP).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The id here is an arbitrary URL for example purposes; VPs are often but not always uniquely identified, whether by identifiers, URLs, or URIs."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'cat > presentation-unsigned.jsonld <<EOF\n{\n    "@context": ["https://www.w3.org/2018/credentials/v1"],\n    "id": "http://example.org/presentations/3731",\n    "type": ["VerifiablePresentation"],\n    "holder": "$did",\n    "verifiableCredential": $(cat credential-signed.jsonld)\n}\nEOF\n')),(0,a.kt)("h3",{id:"issue-verifiable-presentation"},"Issue verifiable presentation."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Pass the unsigned verifiable presentation to DIDKit to be issued as a verifiable presentation. ","*"," DIDKit signs the presentation with a linked data proof, using the given keypair, verification method and proof type."),(0,a.kt)("li",{parentName:"ul"},"We save the resulting newly created verifiable presentation to a file.")),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"In most use-cases, the ",(0,a.kt)("inlineCode",{parentName:"p"},"holder")," field contains a DID or other identifier verifiably linked to the key material signing the presentation, which has some relationship to the credential(s) being presented. The classic example is a fresh and interactive proof of being the ","[human]"," subject identified by a credential, but there are many VP use-cases as well. This may be a manual, consented, unique and interactive identity assurance operation, but it can also be an assurance of the identity of a machine or a legal entity, operated by an API call or an automation carried out by a fiduciary/trusted piece of software, etc."),(0,a.kt)("p",{parentName:"div"},"In these examples, the keys representing the two parties are stored in expressive filenames, 'issuer_key' and 'holder_key'. There are, however, no differences between these keys, and the JWK filenames were chosen simply to clarify the example; there are no restrictions on them."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"didkit vc-issue-presentation \\\n    -k issuer_key.jwk \\\n    -v \"$verification_method\" \\\n    -p authentication \\\n    < presentation-unsigned.jsonld \\\n    > presentation-signed.jsonld\necho 'Issued verifiable presentation:'\ncat presentation-signed.jsonld | jq .\n")),(0,a.kt)("h3",{id:"verify-the-verifiable-presentation"},"Verify the verifiable presentation."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We pass the verifiable presentation we created back to DIDKit for verification, and save the results in a JSON.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"if ! didkit vc-verify-presentation \\\n    -v \"$issuer_verification_method\" \\\n    -p authentication \\\n    < presentation-signed.jsonld \\\n    > presentation-verify-result.json\nthen\n    echo 'Unable to verify presentation:'\n    print_json presentation-verify-result.json\n    exit 1\nfi\necho 'Verified verifiable presentation:'\ncat presentation-verify-result.json | jq .\n\necho Done\n")),(0,a.kt)("h3",{id:"appendix-whole-script-without-commentary"},"Appendix: whole script without commentary"),(0,a.kt)("p",null,"The following is a stand-alone version of all of the above, also available on\nGithub as\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/spruceid/didkit/blob/main/cli/tests/example.sh"},"/cli/tests/example.sh")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/sh\n# This is an example shell script using DIDKit for key generation,\n# credential/presentation issuance and verification.\n\n# Exit if any command in the script fails.\nset -e\n\n# Allow issuing using a DID method other than did:key\ndid_method=${DID_METHOD:-key}\n# More info about did:key: https://w3c-ccg.github.io/did-method-key/\n\n# Allow setting proof format using environmental variables.\nproof_format=${PROOF_FORMAT:-ldp}\nvc_proof_format=${VC_PROOF_FORMAT:-$proof_format}\nvp_proof_format=${VP_PROOF_FORMAT:-$proof_format}\n\n# Pretty-print JSON using jq or json_pp if available.\nprint_json() {\n    file=${1?file}\n    if command -v jq >/dev/null 2>&1; then\n        jq . "$file" || cat "$file"\n    elif command -v json_pp >/dev/null 2>&1; then\n        json_pp < "$file" || cat "$file"\n    else\n        cat "$file"\n    fi\n}\n\n# Run the rest of this script in its source directory.\ncd "$(dirname "$0")"\n\n# Build the didkit CLI program\ncargo build -p didkit-cli\n\n# Adjust $PATH to include the didkit executable.\nexport PATH="$PWD/../../target/debug:$PATH"\n\n# Create a ed25119 keypair if needed.\nif [ -e key.jwk ]; then\n    echo \'Using existing keypair.\'\nelse\n    didkit generate-ed25519-key > key.jwk\n    echo \'Generated keypair.\'\nfi\necho\n\n# Get the keypair\'s DID.\ndid=$(didkit key-to-did "$did_method" -k key.jwk)\nprintf \'DID: %s\\n\\n\' "$did"\n\n# Get verificationMethod for keypair.\n# This is used to identify the key in linked data proofs.\nverification_method=$(didkit key-to-verification-method "$did_method" -k key.jwk)\nprintf \'verificationMethod: %s\\n\\n\' "$verification_method"\n\n# Prepare credential for issuing.\n# In this example credential, the issuance date, id, and credential subject id\n# are arbitrary. For more info about what these properties mean, see the\n# Verifiable Credentials Data Model: https://w3c.github.io/vc-data-model/\ncat > credential-unsigned.jsonld <<EOF\n{\n    "@context": "https://www.w3.org/2018/credentials/v1",\n    "id": "http://example.org/credentials/3731",\n    "type": ["VerifiableCredential"],\n    "issuer": "$did",\n    "issuanceDate": "2020-08-19T21:41:50Z",\n    "credentialSubject": {\n        "id": "did:example:d23dd687a7dc6787646f2eb98d0"\n    }\n}\nEOF\n\n# Issue the verifiable credential.\n# Ask didkit to issue a verifiable credential using the given keypair file,\n# verification method, and proof purpose, passing the unsigned credential on\n# standard input. DIDKit creates a linked data proof to add to the credential,\n# and outputs the resulting newly-issued verifiable credential on standard\n# output, which we save to a file.\ndidkit vc-issue-credential \\\n    -k key.jwk \\\n    -v "$verification_method" \\\n    -p assertionMethod \\\n    -f "$vc_proof_format" \\\n    < credential-unsigned.jsonld \\\n    > credential-signed\necho \'Issued verifiable credential:\'\nif [ "$vc_proof_format" = jwt ]; then\n    cat credential-signed\nelse\n    print_json credential-signed\nfi\necho\n\n# Verify verifiable credential.\n# We pass the newly-issued verifiable credential back to didkit for\n# verification using the given verification method and proof purpose. DIDKit\n# outputs the verification result as JSON. If verification is successful, the\n# command completes successfully (returns exit code 0).\nif ! didkit vc-verify-credential \\\n    -v "$verification_method" \\\n    -p assertionMethod \\\n    -f "$vc_proof_format" \\\n    < credential-signed \\\n    > credential-verify-result.json\nthen\n    echo \'Unable to verify credential:\'\n    print_json credential-verify-result.json\n    exit 1\nfi\necho \'Verified verifiable credential:\'\nprint_json credential-verify-result.json\necho\n\n# Encode credential as JSON for presenting.\nif [ "$vc_proof_format" = jwt ]; then\n    echo -n \'"\'\n    cat credential-signed\n    echo -n \'"\'\nelse\n    cat credential-signed\nfi > credential-signed.json\n\n# Create presentation embedding verifiable credential.\n# Prepare to present the verifiable credential by wrapping it in a\n# Verifiable Presentation. The id here is an arbitrary URL for example purposes.\ncat > presentation-unsigned.jsonld <<EOF\n{\n    "@context": ["https://www.w3.org/2018/credentials/v1"],\n    "id": "http://example.org/presentations/3731",\n    "type": ["VerifiablePresentation"],\n    "holder": "$did",\n    "verifiableCredential": $(cat credential-signed.json)\n}\nEOF\n\n# Issue verifiable presentation.\n# Pass the unsigned verifiable presentation to didkit to be issued as a\n# verifiable presentation. DIDKit signs the presentation with a linked data\n# proof, using the given keypair, verification method and proof type. We save\n# the resulting newly created verifiable presentation to a file.\ndidkit vc-issue-presentation \\\n    -k key.jwk \\\n    -v "$verification_method" \\\n    -p authentication \\\n    -f "$vp_proof_format" \\\n    < presentation-unsigned.jsonld \\\n    > presentation-signed\necho \'Issued verifiable presentation:\'\nif [ "$vp_proof_format" = jwt ]; then\n    cat presentation-signed\nelse\n    print_json presentation-signed\nfi\necho\n\n# Verify verifiable presentation.\n# Pass the verifiable presentation back to didkit for verification.\n# Examine the verification result JSON.\nif ! didkit vc-verify-presentation \\\n    -v "$verification_method" \\\n    -p authentication \\\n    -f "$vp_proof_format" \\\n    < presentation-signed \\\n    > presentation-verify-result.json\nthen\n    echo \'Unable to verify presentation:\'\n    print_json presentation-verify-result.json\n    exit 1\nfi\necho \'Verified verifiable presentation:\'\nprint_json presentation-verify-result.json\necho\n\n# Resolve a DID.\nif ! didkit did-resolve "$did" > did.json\nthen\n    echo \'Unable to resolve DID.\'\n    exit 1\nfi\necho \'Resolved DID to DID document:\'\nprint_json did.json\n\n# Dereference a DID URL\nif ! didkit did-dereference "$verification_method" > vm.json\nthen\n    echo \'Unable to dereference DID URL.\'\n    exit 1\nfi\necho \'Dereferenced DID URL for verification method:\'\nprint_json vm.json\n\n# Authenticate with a DID\nif ! challenge=$(awk \'BEGIN { srand(); print rand() }\')\nthen\n    echo \'Unable to create challenge.\'\n    exit 1\nfi\nif ! didkit did-auth \\\n    -k key.jwk \\\n    -h "$did" \\\n    -p authentication \\\n    -C "$challenge" \\\n    -v "$verification_method" \\\n    -f "$vp_proof_format" \\\n    > auth\nthen\n    echo \'Unable to create DIDAuth response\'\n    exit 1\nfi\n\necho \'Generated DIDAuth verifiable presentation:\'\nif [ "$vp_proof_format" = jwt ]; then\n    cat auth\nelse\n    print_json auth\nfi\necho\n\n# Verify DID auth\nif ! didkit vc-verify-presentation \\\n    -p authentication \\\n    -C "$challenge" \\\n    -f "$vp_proof_format" \\\n    < auth \\\n    > auth-verify-result.json\nthen\n    echo \'Unable to verify DIDAuth presentation:\'\n    print_json auth-verify-result.json\n    exit 1\nfi\necho \'Verified DIDAuth verifiable presentation:\'\nprint_json auth-verify-result.json\necho\n\n# Convert VP to Canonicalized RDF\nif [ "$vp_proof_format" = ldp ]; then\n    if ! didkit to-rdf-urdna2015 < auth > auth.nq\n    then\n        echo \'Unable to convert/canonicalize document:\' >&2\n        exit 1\n    fi\n    echo \'Converted verifiable presentation to canonicalized N-Quads:\'\n    cat auth.nq\nfi\necho\n\necho Done\n')))}l.isMDXComponent=!0}}]);