"use strict";(self.webpackChunkdevsite=self.webpackChunkdevsite||[]).push([[4886],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,k=u["".concat(l,".").concat(h)]||u[h]||c[h]||a;return n?i.createElement(k,o(o({ref:t},d),{},{components:n})):i.createElement(k,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3469:function(e,t,n){n.r(t),n.d(t,{default:function(){return c},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],s={id:"http",title:"HTTP Server"},l={unversionedId:"didkit-packages/http",id:"didkit-packages/http",isDocsHomePage:!1,title:"HTTP Server",description:"[Service]//docs.rs/tower-service/0.3.0/tower_service/trait.Service.html",source:"@site/docs/didkit-packages/http.md",sourceDirName:"didkit-packages",slug:"/didkit-packages/http",permalink:"/docs/didkit-packages/http",editUrl:"https://github.com/spruceid/spruceid.dev/edit/main/docs/didkit-packages/http.md",version:"current",frontMatter:{id:"http",title:"HTTP Server"},sidebar:"docs",previous:{title:"Command Line Interface",permalink:"/docs/didkit-packages/cli"},next:{title:"Rust Crate",permalink:"/docs/didkit-packages/rust"}},p=[{value:"At a Glance",id:"at-a-glance",children:[]},{value:"Installation",id:"installation",children:[{value:"Docker",id:"docker",children:[]}]},{value:"CLI",id:"cli",children:[{value:"<code>didkit-http</code>",id:"didkit-http",children:[]}]},{value:"Rust library",id:"rust-library",children:[]},{value:"API",id:"api",children:[{value:"POST <code>/issue/credentials</code>",id:"post-issuecredentials",children:[]},{value:"POST <code>/verify/credentials</code>",id:"post-verifycredentials",children:[]},{value:"POST <code>/prove/presentations</code>",id:"post-provepresentations",children:[]},{value:"POST <code>/verify/presentations</code>",id:"post-verifypresentations",children:[]}]},{value:"Examples",id:"examples",children:[]}],d={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"at-a-glance"},"At a Glance"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"For setting up an HTTP server, whether for internal use, over the open internet, or both, we recommend using our dockerized HTTP server. Instructions ",(0,a.kt)("a",{parentName:"li",href:"#Docker"},"below")),(0,a.kt)("li",{parentName:"ul"},"Instructions for building manually can be found on the main ",(0,a.kt)("a",{parentName:"li",href:"/docs/didkit/install"},"Installation page")),(0,a.kt)("li",{parentName:"ul"},"Rather than design our own API, we have opted to adopt (and contribute to) the W3C Credentials Community Group's neutral, open standard for VC-handling APIs, the ",(0,a.kt)("a",{parentName:"li",href:"https://w3c-ccg.github.io/vc-http-api/"},"vc-http-api"),"; we invite you to consider doing the same for your projects, if it is a reasonable fit for your needs.  For details, see that project's documentation and its separate ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/w3c-ccg/vc-http-api-use-cases/"},"use cases document"),"."),(0,a.kt)("li",{parentName:"ul"},'The server is run as a Rust "Tower" ',(0,a.kt)("a",{parentName:"li",href:"https://docs.rs/tower-service/0.3.0/tower_service/trait.Service.html"},"Service"),", which can be spun up with a ",(0,a.kt)("a",{parentName:"li",href:"#Options"},"single line")," upon installation.")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("h3",{id:"docker"},"Docker"),(0,a.kt)("p",null,"The HTTP server is containerised and available under\n",(0,a.kt)("inlineCode",{parentName:"p"},"ghcr.io/spruceid/didkit-http"),"."),(0,a.kt)("p",null,"You can use the images as a CLI:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker run --init -p 8080 ghcr.io/spruceid/didkit-http:latest --port 8080\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: You can pass JWKs either by sharing a volume with ",(0,a.kt)("inlineCode",{parentName:"p"},"docker run --volume"),", or by passing the JWK directly with ",(0,a.kt)("inlineCode",{parentName:"p"},"docker run -e JWK=$MY_JWK")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"docker run didkit-http --jwk $MY_JWK"),".")),(0,a.kt)("p",null,"See the repo's ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/spruceid/didkit/Dockerfile-http"},"Dockerfile")," for further details."),(0,a.kt)("h2",{id:"cli"},"CLI"),(0,a.kt)("h3",{id:"didkit-http"},(0,a.kt)("inlineCode",{parentName:"h3"},"didkit-http")),(0,a.kt)("p",null,"Run a DIDKit HTTP server. The command outputs the URL it is listening on, and runs until interrupted."),(0,a.kt)("h4",{id:"options"},"Options"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-s, --host <host>")," - Hostname to listen on. Default is ",(0,a.kt)("inlineCode",{parentName:"li"},"127.0.0.1"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-p, --port <port>")," - Port to listen on. Default is a random OS-chosen port."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-k, --key <key>"),"   - Filename of a JWK to use for issuing credentials and\npresentations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"-j, --jwk <jwk>"),"   - JWK to use for issuing credentials and presentations.")),(0,a.kt)("h4",{id:"issuer-keys"},"Issuer keys"),(0,a.kt)("p",null,"Provide issuer keys using the ",(0,a.kt)("inlineCode",{parentName:"p"},"-k"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"--key-path")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"-j"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"--jwk")," options. If none are provided, issuance functionality will be unavailable. If one is provided, that one will be used to sign all credentials and presentations, regardless of the proof options in the issuance request. If more than one key is provided, the issuance request may identify which key to use for signing by its DID in the ",(0,a.kt)("inlineCode",{parentName:"p"},"verificationMethod")," property of the proof options; if none is identified in that property, the first key is used."),(0,a.kt)("h4",{id:"addition-configuration"},"Addition configuration"),(0,a.kt)("h5",{id:"outbound-proxy"},"Outbound Proxy"),(0,a.kt)("p",null,"You can set the environment variable ",(0,a.kt)("inlineCode",{parentName:"p"},"HTTP_PROXY")," to have DIDKit use a proxy.\nBoth HTTP and SOCKS protocols are supported."),(0,a.kt)("h2",{id:"rust-library"},"Rust library"),(0,a.kt)("p",null,"Rust crate ",(0,a.kt)("inlineCode",{parentName:"p"},"didkit-http")," contains DIDKit's HTTP server implementation as a Rust\nlibrary. Struct ",(0,a.kt)("inlineCode",{parentName:"p"},"didkit_http::DIDKitHTTPMakeSvc")," implements a Tower\n(",(0,a.kt)("a",{parentName:"p",href:"https://hyper.rs/"},"hyper"),")"),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("p",null,"The following routes implement ",(0,a.kt)("a",{parentName:"p",href:"https://w3c-ccg.github.io/vc-http-api/"},"W3C CCG's VC HTTP API (vc-http-api)")," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/w3c-ccg/vc-http-api/pull/72"},"v0.0.1"),". POST bodies should be typed as ",(0,a.kt)("inlineCode",{parentName:"p"},"application/json"),". Output will be ",(0,a.kt)("inlineCode",{parentName:"p"},"application/json")," on success; on error it will be either ",(0,a.kt)("inlineCode",{parentName:"p"},"application/json")," or plain text. For more details, see the documentation for the ",(0,a.kt)("a",{parentName:"p",href:"https://w3c-ccg.github.io/vc-http-api/"},"vc-http-api")," specification."),(0,a.kt)("h3",{id:"post-issuecredentials"},"POST ",(0,a.kt)("inlineCode",{parentName:"h3"},"/issue/credentials")),(0,a.kt)("p",null,"Issue a verifiable credential. The server uses its configured key and the given linked data proof options to generate a proof and append it to the given credential. On success, the resulting verifiable credential is returned, with HTTP status 201."),(0,a.kt)("h3",{id:"post-verifycredentials"},"POST ",(0,a.kt)("inlineCode",{parentName:"h3"},"/verify/credentials")),(0,a.kt)("p",null,"Verify a verifiable credential. The server verifies the given credential with the given linked data proof options. To successfully verify, the credential must contain at least one proof that verifies successfully. Verification results include a list of checks performed, warnings that should be flagged to the user, and errors encountered. On success, the errors list will be empty, and the HTTP status code will be 200."),(0,a.kt)("h3",{id:"post-provepresentations"},"POST ",(0,a.kt)("inlineCode",{parentName:"h3"},"/prove/presentations")),(0,a.kt)("p",null,"Create a verifiable presentation. Given a presentation and linked data proof options, the server uses its key to generate a proof and append it to the presentation. On success, returns the verifiable presentation and HTTP status 201."),(0,a.kt)("h3",{id:"post-verifypresentations"},"POST ",(0,a.kt)("inlineCode",{parentName:"h3"},"/verify/presentations")),(0,a.kt)("p",null,"Verify a verifiable presentation using the given proof options. Returns a verification result. HTTP status 200 indicates successful verification."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Tool"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"DIF Universal Resolver Driver, Dockerized HTTP server"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://github.com/decentralized-identity/universal-resolver#drivers"},"DIF Universal Resolver repo"))))))}c.isMDXComponent=!0}}]);